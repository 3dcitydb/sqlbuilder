plugins {
    id 'java'
    id 'maven-publish'
}

group 'org.citydb'
version '2.2.1'
description 'Dynamic SQL builder for the 3D City Database'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version
        )
    }
    into('META-INF') {
        from 'LICENSE'
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = project.name
                description = project.description
                url = 'https://github.com/3dcitydb'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'clausnagel'
                        name = 'Claus Nagel'
                        email = 'claus.nagel@gmail.com'
                        roles = ['architect', 'developer']
                        timezone = '+1'
                    }
                }
                scm {
                    url = 'https://github.com/3dcitydb/sqlbuilder'
                    connection = 'scm:git:https://github.com/3dcitydb/sqlbuilder.git'
                }
            }
        }
    }
    repositories {
        maven {
            url project.hasProperty('gitLab_maven_url') ? project.property('gitLab_maven_url') : System.getenv('GITLAB_MAVEN_URL')
            name 'gitlab-maven'
            credentials(HttpHeaderCredentials) {
                name = 'Private-Token'
                value = project.hasProperty('gitLab_private_token') ? project.property('gitLab_private_token') : System.getenv('GITLAB_PRIVATE_TOKEN')
            }
            authentication {
                header(HttpHeaderAuthentication)
            }
        }
    }
}